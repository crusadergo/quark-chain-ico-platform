const Web3 = require('web3');
const QuarkChain = require('quarkchain-web3');
const abi = require('./build/contracts/Token');

const privateKey = '0x026D813864F0F79AE8C5448C51FE01580DABED47DE5761C32DFA09659A6DFC4E';

const web3 = new Web3();
QuarkChain.injectWeb3(web3, 'http://jrpc.testnet.quarkchain.io:38391')

web3.qkc.setPrivateKey(privateKey);

const data = "0x608060405234801561001057600080fd5b50604051610bdc380380610bdc833981018060405281019080805182019291906020018051820192919060200180519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600490805190602001906100a09291906100db565b5081600590805190602001906100b79291906100db565b5080600660006101000a81548160ff021916908360ff160217905550505050610180565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011c57805160ff191683800117855561014a565b8280016001018555821561014a579182015b8281111561014957825182559160200191906001019061012e565b5b509050610157919061015b565b5090565b61017d91905b80821115610179576000816000905550600101610161565b5090565b90565b610a4d8061018f6000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461009e57806318160ddd1461012e578063313ce5671461015957806340c10f191461018a57806370a08231146101ef57806379ba5097146102465780638da5cb5b1461025d57806395d89b41146102b4578063f2fde38b14610344575b600080fd5b3480156100aa57600080fd5b506100b3610387565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f35780820151818401526020810190506100d8565b50505050905090810190601f1680156101205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013a57600080fd5b50610143610425565b6040518082815260200191505060405180910390f35b34801561016557600080fd5b5061016e61042b565b604051808260ff1660ff16815260200191505060405180910390f35b34801561019657600080fd5b506101d5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061043e565b604051808215151515815260200191505060405180910390f35b3480156101fb57600080fd5b50610230600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610625565b6040518082815260200191505060405180910390f35b34801561025257600080fd5b5061025b61066e565b005b34801561026957600080fd5b50610272610836565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c057600080fd5b506102c961085b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103095780820151818401526020810190506102ee565b50505050905090810190601f1680156103365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561035057600080fd5b50610385600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108f9565b005b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561041d5780601f106103f25761010080835404028352916020019161041d565b820191906000526020600020905b81548152906001019060200180831161040057829003601f168201915b505050505081565b60025481565b600660009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610505576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4e6f7420617574686f72697a656400000000000000000000000000000000000081525060200191505060405180910390fd5b61051a83600254610a0390919063ffffffff16565b60028190555061057283600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a0390919063ffffffff16565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191505092915050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4e6f7420617574686f72697a656400000000000000000000000000000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108f15780601f106108c6576101008083540402835291602001916108f1565b820191906000526020600020905b8154815290600101906020018083116108d457829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f4e6f7420617574686f72697a656400000000000000000000000000000000000081525060200191505060405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000808284019050838110151515610a1757fe5b80915050929150505600a165627a7a72305820d5257d77dc583db2791f5001a8900883116cab6c401b9da43c31fc72cb2fc6880029"
const accounts = web3.qkc.accounts;

const myEth = "0x4875913b69bf2802867e7F60e163582833811B2e";

var MyContract = web3.qkc.contract(abi.abi)
// var contractInstance = MyContract.at(myEth);
// console.log(MyContract.eth.accounts);
// const account = web3.eth.accounts[0];

// deploy new contract
var contractInstance = MyContract.new("Some coin", "SMCN", 18, {data: data, from: myEth, gas: 1000000},
function(err, myContract){
  if(!err) {
     // NOTE: The callback will fire twice!
     // Once the contract has the transactionId property set and once its deployed on an address.

     // e.g. check tx hash on the first call (transaction send)
     if(!myContract.address) {
         console.log('loosers', myContract.transactionId); // The id of the transaction, which deploys the contract
         console.log({err}); // The id of the transaction, which deploys the contract

     // check address on the second call (contract deployed)
     } else {
         console.log('we got address', myContract.address); // the contract address
     }

     // Note that the returned "myContractReturned" === "myContract",
     // so the returned "myContractReturned" object will also get the address set.
  }
});


// var contractData = MyContract.new.getData([constructorParam1] [, constructorParam2], {data: '0x12345...'});
// console.log(web3.qkc);

// Get the data to deploy the contract manually
// var contractData = MyContract.new.getData([constructorParam1] [, constructorParam2], {data: '0x12345...'});
// contractData = '0x12345643213456000000000023434234'

// Or deploy a new contract:

// Deploy the contract asynchronous from Solidity file:
// const fs = require("fs");
// const solc = require('solc')

// let source = fs.readFileSync('./contracts/ERC20Token.sol', 'utf8');
// let compiledContract = solc.compile(source, 1);
// // console.log(compiledContract.contracts[':Token']);
// let abi = compiledContract.contracts[':Token'].interface;
// let bytecode = compiledContract.contracts[':Token'].bytecode;
// let MyContract = web3.eth.contract(JSON.parse(abi));
// console.log(MyContract.transactionId);

// // // Instantiate from an existing address:
// // var myContractInstance = MyContract.at(myContractAddress);

// var myContractReturned = MyContract.new('Some token', 'SmTK', 18, {
//    data: bytecode,
//    gas: 1000000}, function(err, myContract){
//     if(!err) {
//        // NOTE: The callback will fire twice!
//        // Once the contract has the transactionId property set and once its deployed on an address.

//        // e.g. check tx hash on the first call (transaction send)

//        if(!myContract.address) {
//            console.log(myContract.transactionId); // The id of the transaction, which deploys the contract

//        // check address on the second call (contract deployed)
//        } else {
//            console.log(myContract.address); // the contract address
//        }

//        // Note that the returned "myContractReturned" === "myContract",
//        // so the returned "myContractReturned" object will also get the address set.
//     }
//   });